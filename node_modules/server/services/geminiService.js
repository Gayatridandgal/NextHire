import { GoogleGenerativeAI } from '@google/generative-ai';
import { config } from '../config.js';

const genAI = new GoogleGenerativeAI(config.geminiApiKey);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });

export async function getCareerFitScore(text, role) {
  const prompt = `Evaluate this resume and provide a fit score (0â€“100) for the role of '${role}'. Only return a number and one-line reason, pipe-separated.
Format: <score>|<reason>
Resume:
${text}`;
  const resp = await model.generateContent(prompt);
  const out = resp.response.text().trim();
  // Expect "85|Strong frontend experience but lacks testing"
  const [scoreStr, reason = ''] = out.split('|').map(s => s.trim());
  const score = Math.max(0, Math.min(100, parseInt(scoreStr, 10) || 0));
  return { score, reason };
}

export async function getATSuggestions(text, role) {
  const prompt = `Analyze this resume text and list specific suggestions to improve ATS compatibility for a '${role}' role. 
Return a concise JSON with:
{
  "keywordsToAdd": [string],
  "sectionsMissing": [string],
  "formattingTips": [string],
  "redFlags": [string]
}
Resume:
${text}`;
  const resp = await model.generateContent(prompt);
  // Response may be fenced code; strip backticks if present
  const raw = resp.response.text().replace(/```json|```/g, '').trim();
  try {
    return JSON.parse(raw);
  } catch {
    return { keywordsToAdd: [], sectionsMissing: [], formattingTips: [], redFlags: [], raw };
  }
}

export async function getRewrittenBullet(bullet, role) {
  const prompt = `Rewrite this resume line to be more results-driven and tailored to a '${role}' role.
Make it one line, start with a strong verb, quantify impact if possible, and keep under 25 words.
Original: "${bullet}"`;
  const resp = await model.generateContent(prompt);
  return resp.response.text().replace(/(^"|"$)/g, '').trim();
}
