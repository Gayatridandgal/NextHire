import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import mongoose from 'mongoose';
import path from 'path';
import { fileURLToPath } from 'url';

import { config } from './config.js';
import apiRouter from './routes/index.js';
import { notFound, errorHandler } from './middleware/errorHandler.js';
import { apiRateLimiter } from './middleware/rateLimiter.js';

import dotenv from 'dotenv';
dotenv.config();

// Removed duplicate mongoose.connect

const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Security & Core
app.use(helmet());
app.use(cors({ origin: config.clientOrigin, credentials: true }));
app.use(express.json({ limit: '2mb' }));
app.use(express.urlencoded({ extended: true }));
app.use(morgan(config.nodeEnv === 'production' ? 'combined' : 'dev'));

// Static uploads (if you need to expose)
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// Rate limit
app.use('/api', apiRateLimiter);

// API
app.use('/api', apiRouter);

// 404 / Error
app.use(notFound);
app.use(errorHandler);

// DB + Listen
mongoose.connect(config.mongoUri).then(() => {
  console.log('MongoDB connected');
  app.listen(config.port, () => {
    console.log(`Server listening on :${config.port}`);
  });
}).catch(err => {
  console.error('MongoDB connection error', err);
  process.exit(1);
});